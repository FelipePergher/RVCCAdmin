// <auto-generated />
using System;
using LigaCancer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LigaCancer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180927132540_RelationsManyToMany")]
    partial class RelationsManyToMany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationCancerType", b =>
                {
                    b.Property<int>("PatientInformationId");

                    b.Property<int>("CancerTypeId");

                    b.HasKey("PatientInformationId", "CancerTypeId");

                    b.HasIndex("CancerTypeId");

                    b.ToTable("PatientInformationCancerType");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationDoctor", b =>
                {
                    b.Property<int>("PatientInformationId");

                    b.Property<int>("DoctorId");

                    b.HasKey("PatientInformationId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientInformationDoctor");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationMedicine", b =>
                {
                    b.Property<int>("PatientInformationId");

                    b.Property<int>("MedicineId");

                    b.HasKey("PatientInformationId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PatientInformationMedicine");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationTreatmentPlace", b =>
                {
                    b.Property<int>("PatientInformationId");

                    b.Property<int>("TreatmentPlaceId");

                    b.HasKey("PatientInformationId", "TreatmentPlaceId");

                    b.HasIndex("TreatmentPlaceId");

                    b.ToTable("PatientInformationTreatmentPlace");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientNaturality", b =>
                {
                    b.Property<int>("PatientId");

                    b.Property<int>("NaturalityId");

                    b.HasKey("PatientId", "NaturalityId");

                    b.HasIndex("NaturalityId");

                    b.ToTable("PatientNaturality");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientProfession", b =>
                {
                    b.Property<int>("PatientId");

                    b.Property<int>("ProfessionId");

                    b.HasKey("PatientId", "ProfessionId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("PatientProfession");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.ResidenceTypeResidence", b =>
                {
                    b.Property<int>("ResidenceId");

                    b.Property<int>("ResidenceTypeId");

                    b.HasKey("ResidenceId", "ResidenceTypeId");

                    b.HasIndex("ResidenceTypeId");

                    b.ToTable("ResidenceTypeResidence");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.ActivePatient", b =>
                {
                    b.Property<int>("ActivePatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DeathDate");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<DateTime>("DischargeDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("ActivePatientId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ActivePatients");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Complement");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<string>("HouseNumber");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Neighborhood");

                    b.Property<string>("ObservationAddress");

                    b.Property<int?>("PatientId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Street");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("AddressId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Attachments", b =>
                {
                    b.Property<int>("AttachmentsId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<int?>("PatientId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("AttachmentsId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.CancerType", b =>
                {
                    b.Property<int>("CancerTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("CancerTypeId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CancerTypes");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CRM");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("DoctorId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<double>("FamilyIncome");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<double>("MonthlyIncome");

                    b.Property<double>("PerCapitaIncome");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int?>("ResidenceId");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("FamilyId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.FamilyMembers", b =>
                {
                    b.Property<int>("FamilyMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<int?>("FamilyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Kinship");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<double>("MonthlyIncome");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("Sex");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("FamilyMemberId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.FileAttachment", b =>
                {
                    b.Property<int>("FileAttachmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AttachmentsId");

                    b.Property<int?>("AttachmentsId1");

                    b.Property<int?>("AttachmentsId2");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("FileAttachmentId");

                    b.HasIndex("AttachmentsId");

                    b.HasIndex("AttachmentsId1");

                    b.HasIndex("AttachmentsId2");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("MedicineId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Naturality", b =>
                {
                    b.Property<int>("NaturalityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("State");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("NaturalityId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Naturalities");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF");

                    b.Property<int>("CivilState");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("FamiliarityGroup");

                    b.Property<int?>("FamilyId");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<int?>("PatientInformationId");

                    b.Property<string>("RG");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("Sex");

                    b.Property<string>("Surname");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("PatientId");

                    b.HasIndex("FamilyId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("PatientInformationId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.PatientInformation", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActivePatientId");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<DateTime>("TreatmentbeginDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("PatientInformationId");

                    b.HasIndex("ActivePatientId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Number");

                    b.Property<string>("ObservationNote");

                    b.Property<int?>("PatientId");

                    b.Property<int>("PhoneType");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("PhoneId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Profession", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("ProfessionId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Residence", b =>
                {
                    b.Property<int>("ResidenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("ResidenceObservation");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("ResidenceId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.ResidenceType", b =>
                {
                    b.Property<int>("ResidenceTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Type");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("ResidenceTypeId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ResidenceTypes");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.TreatmentPlace", b =>
                {
                    b.Property<int>("TreatmentPlaceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("LastUserUpdateId");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("UserCreatedId");

                    b.HasKey("TreatmentPlaceId");

                    b.HasIndex("LastUserUpdateId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("TreatmentPlaces");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DeletedDate");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("RegisterDate");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationCancerType", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.CancerType", "CancerType")
                        .WithMany("PatientInformationCancerTypes")
                        .HasForeignKey("CancerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationCancerTypes")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationDoctor", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Doctor", "Doctor")
                        .WithMany("PatientInformationDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationDoctors")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationMedicine", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Medicine", "Medicine")
                        .WithMany("PatientInformationMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationMedicines")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientInformationTreatmentPlace", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationTreatmentPlaces")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.TreatmentPlace", "TreatmentPlace")
                        .WithMany("PatientInformationTreatmentPlaces")
                        .HasForeignKey("TreatmentPlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientNaturality", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Naturality", "Naturality")
                        .WithMany("PatientNaturalities")
                        .HasForeignKey("NaturalityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Patient", "Patient")
                        .WithMany("PatientNaturalities")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.PatientProfession", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Patient", "Patient")
                        .WithMany("PatientProfessions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Profession", "Profession")
                        .WithMany("PatientProfessions")
                        .HasForeignKey("ProfessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.ManyToManyModels.ResidenceTypeResidence", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Residence", "Residence")
                        .WithMany("ResidenceTypeResidences")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LigaCancer.Data.Models.PatientModels.ResidenceType", "ResidenceType")
                        .WithMany("ResidenceTypeResidences")
                        .HasForeignKey("ResidenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.ActivePatient", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Address", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Attachments", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Patient")
                        .WithMany("Attachments")
                        .HasForeignKey("PatientId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.CancerType", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Doctor", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Family", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Residence", "Residence")
                        .WithMany()
                        .HasForeignKey("ResidenceId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.FamilyMembers", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Family")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.FileAttachment", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Attachments")
                        .WithMany("MedicalDocuments")
                        .HasForeignKey("AttachmentsId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Attachments")
                        .WithMany("OtherDocuments")
                        .HasForeignKey("AttachmentsId1");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Attachments")
                        .WithMany("PersonalDocuments")
                        .HasForeignKey("AttachmentsId2");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Medicine", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Naturality", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Patient", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.Family", "Family")
                        .WithMany()
                        .HasForeignKey("FamilyId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.PatientInformation", "PatientInformation")
                        .WithMany()
                        .HasForeignKey("PatientInformationId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.PatientInformation", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.PatientModels.ActivePatient", "ActivePatient")
                        .WithMany()
                        .HasForeignKey("ActivePatientId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Phone", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.PatientModels.Patient")
                        .WithMany("Phones")
                        .HasForeignKey("PatientId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Profession", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.Residence", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.ResidenceType", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("LigaCancer.Data.Models.PatientModels.TreatmentPlace", b =>
                {
                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "LastUserUpdate")
                        .WithMany()
                        .HasForeignKey("LastUserUpdateId");

                    b.HasOne("LigaCancer.Data.Models.ApplicationUser", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
