// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RVCC.Data;

#nullable disable

namespace RVCC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditAddress", b =>
                {
                    b.Property<int>("AuditAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditAddressId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlyAmountResidence")
                        .HasColumnType("float");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ResidenceType")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditAddressId");

                    b.ToTable("AuditAddresses");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditAuxiliarAccessoryType", b =>
                {
                    b.Property<int>("AuditAuxiliarAccessoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditAuxiliarAccessoryTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AuxiliarAccessoryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditAuxiliarAccessoryTypeId");

                    b.ToTable("AuditAuxiliarAccessoryTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditBenefit", b =>
                {
                    b.Property<int>("AuditBenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditBenefitId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditBenefitId");

                    b.ToTable("AuditBenefits");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditCancerType", b =>
                {
                    b.Property<int>("AuditCancerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditCancerTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CancerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditCancerTypeId");

                    b.ToTable("AuditCancerTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditDoctor", b =>
                {
                    b.Property<int>("AuditDoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditDoctorId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CRM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditDoctorId");

                    b.ToTable("AuditDoctors");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditExpenseType", b =>
                {
                    b.Property<int>("AuditExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditExpenseTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeFrequency")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditExpenseTypeId");

                    b.ToTable("AuditExpenseTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditFamilyMember", b =>
                {
                    b.Property<int>("AuditFamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditFamilyMemberId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("IgnoreOnIncome")
                        .HasColumnType("bit");

                    b.Property<string>("Kinship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyIncomeMinSalary")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("Responsible")
                        .HasColumnType("bit");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditFamilyMemberId");

                    b.ToTable("AuditFamilyMembers");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditFileAttachment", b =>
                {
                    b.Property<int>("AuditFileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditFileAttachmentId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FileAttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditFileAttachmentId");

                    b.ToTable("AuditFileAttachments");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditMedicine", b =>
                {
                    b.Property<int>("AuditMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditMedicineId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditMedicineId");

                    b.ToTable("AuditMedicines");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditNaturality", b =>
                {
                    b.Property<int>("AuditNaturalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditNaturalityId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NaturalityId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditNaturalityId");

                    b.ToTable("AuditNaturalities");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatient", b =>
                {
                    b.Property<int>("AuditPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CivilState")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FamiliarityGroup")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ForwardedToSupportHouse")
                        .HasColumnType("bit");

                    b.Property<string>("ImmediateNecessities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImmediateNecessitiesDateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyIncomeMinSalary")
                        .HasColumnType("float");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("SocialObservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientId");

                    b.ToTable("AuditPatients");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientAuxiliarAccessoryType", b =>
                {
                    b.Property<int>("AuditAuxiliarAccessoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditAuxiliarAccessoryTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AuxiliarAccessoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuxiliarAccessoryTypeTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("DuoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientAuxiliarAccessoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditAuxiliarAccessoryTypeId");

                    b.ToTable("AuditPatientAuxiliarAccessoryTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientBenefit", b =>
                {
                    b.Property<int>("AuditPatientBenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientBenefitId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BenefitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<string>("BenefitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientBenefitId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientBenefitId");

                    b.ToTable("AuditPatientBenefits");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientExpenseType", b =>
                {
                    b.Property<int>("AuditExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditExpenseTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("AuditExpenseTypeId");

                    b.ToTable("AuditPatientExpenseTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformation", b =>
                {
                    b.Property<int>("AuditPatientInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TreatmentBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationId");

                    b.ToTable("AuditPatientInformations");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformationCancerType", b =>
                {
                    b.Property<int>("AuditPatientInformationCancerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationCancerTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CancerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationCancerTypeId");

                    b.ToTable("AuditPatientInformationCancerTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformationDoctor", b =>
                {
                    b.Property<int>("AuditPatientInformationDoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationDoctorId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationDoctorId");

                    b.ToTable("AuditPatientInformationDoctors");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformationMedicine", b =>
                {
                    b.Property<int>("AuditPatientInformationMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationMedicineId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationMedicineId");

                    b.ToTable("AuditPatientInformationMedicines");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformationServiceType", b =>
                {
                    b.Property<int>("AuditPatientInformationServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationServiceTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationServiceTypeId");

                    b.ToTable("AuditPatientInformationServiceTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPatientInformationTreatmentPlace", b =>
                {
                    b.Property<int>("AuditPatientInformationTreatmentPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPatientInformationTreatmentPlaceId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPatientInformationTreatmentPlaceId");

                    b.ToTable("AuditPatientInformationTreatmentPlaces");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditPhone", b =>
                {
                    b.Property<int>("AuditPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditPhoneId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditPhoneId");

                    b.ToTable("AuditPhones");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditSaleShirt2020", b =>
                {
                    b.Property<int>("AuditShirtSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditShirtSaleId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCanceled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCollected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateConfection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateProduced")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaskQuantity")
                        .HasColumnType("int");

                    b.Property<double>("PriceTotal")
                        .HasColumnType("float");

                    b.Property<int>("ShirtQuantityTotal")
                        .HasColumnType("int");

                    b.Property<int>("ShirtSaleId")
                        .HasColumnType("int");

                    b.Property<int>("Size10NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size12NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size14NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size16NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size2NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size4NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size6NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size8NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeMBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeMNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizePBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizePNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeXGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeXGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditShirtSaleId");

                    b.ToTable("AuditSaleShirt2020s");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditServiceType", b =>
                {
                    b.Property<int>("AuditServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditServiceTypeId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditServiceTypeId");

                    b.ToTable("AuditServiceTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditSetting", b =>
                {
                    b.Property<int>("AuditSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditSettingId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditSettingId");

                    b.ToTable("AuditSettings");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditStay", b =>
                {
                    b.Property<int>("AuditStayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditStayId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StayDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StayId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditStayId");

                    b.ToTable("AuditStays");
                });

            modelBuilder.Entity("RVCC.Data.Models.Audit.AuditTreatmentPlace", b =>
                {
                    b.Property<int>("AuditTreatmentPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditTreatmentPlaceId"), 1L, 1);

                    b.Property<string>("AuditAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTreatmentPlaceId");

                    b.ToTable("AuditTreatmentPlaces");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ActivePatient", b =>
                {
                    b.Property<int>("ActivePatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivePatientId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Death")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DeathDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Discharge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ResidenceChange")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ResidenceChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ActivePatientId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("ActivePatients");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlyAmountResidence")
                        .HasColumnType("float");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResidenceType")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AddressId");

                    b.HasIndex("PatientId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.AuxiliarAccessoryType", b =>
                {
                    b.Property<int>("AuxiliarAccessoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuxiliarAccessoryTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AuxiliarAccessoryTypeId");

                    b.ToTable("AuxiliarAccessoryTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Benefit", b =>
                {
                    b.Property<int>("BenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BenefitId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BenefitId");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.CancerType", b =>
                {
                    b.Property<int>("CancerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancerTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CancerTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("CancerTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"), 1L, 1);

                    b.Property<string>("CRM")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId");

                    b.HasIndex("CRM")
                        .IsUnique()
                        .HasFilter("[CRM] IS NOT NULL");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ExpenseType", b =>
                {
                    b.Property<int>("ExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpenseTypeFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ExpenseTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.FamilyMember", b =>
                {
                    b.Property<int>("FamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyMemberId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IgnoreOnIncome")
                        .HasColumnType("bit");

                    b.Property<string>("Kinship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyIncomeMinSalary")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Responsible")
                        .HasColumnType("bit");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyMemberId");

                    b.HasIndex("PatientId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.FileAttachment", b =>
                {
                    b.Property<int>("FileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileAttachmentId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("FileAttachmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MedicineId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Naturality", b =>
                {
                    b.Property<int>("NaturalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NaturalityId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("NaturalityId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Naturalities");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"), 1L, 1);

                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<int?>("CivilState")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FamiliarityGroup")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<bool>("ForwardedToSupportHouse")
                        .HasColumnType("bit");

                    b.Property<string>("ImmediateNecessities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ImmediateNecessitiesDateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MonthlyIncome")
                        .HasColumnType("float");

                    b.Property<double>("MonthlyIncomeMinSalary")
                        .HasColumnType("float");

                    b.Property<string>("Profession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RG")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("SocialObservation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientId");

                    b.HasIndex("CPF")
                        .IsUnique()
                        .HasFilter("[CPF] IS NOT NULL");

                    b.HasIndex("RG")
                        .IsUnique()
                        .HasFilter("[RG] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.PatientInformation", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientInformationId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TreatmentBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientInformationId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("PatientInformation");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservationNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PhoneId");

                    b.HasIndex("PatientId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.SaleShirt2020", b =>
                {
                    b.Property<int>("ShirtSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShirtSaleId"), 1L, 1);

                    b.Property<string>("BuyerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuyerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCanceled")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCollected")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateConfection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateProduced")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaskQuantity")
                        .HasColumnType("int");

                    b.Property<double>("PriceTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShirtQuantityTotal")
                        .HasColumnType("int");

                    b.Property<int>("Size10NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size12NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size14NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size16NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size2NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size4NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size6NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Size8NormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeMBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeMNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizePBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizePNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeXGBabyLookQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SizeXGNormalQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ShirtSaleId");

                    b.ToTable("SalesShirt2020");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceTypeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"), 1L, 1);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Stay", b =>
                {
                    b.Property<int>("StayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StayId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StayDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("StayId");

                    b.HasIndex("PatientId");

                    b.ToTable("Stays");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.TreatmentPlace", b =>
                {
                    b.Property<int>("TreatmentPlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentPlaceId"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(450)")
                        .UseCollation("Latin1_General_CI_AI");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TreatmentPlaceId");

                    b.HasIndex("City")
                        .IsUnique()
                        .HasFilter("[City] IS NOT NULL");

                    b.ToTable("TreatmentPlaces");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientAuxiliarAccessoryType", b =>
                {
                    b.Property<int>("PatientAuxiliarAccessoryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientAuxiliarAccessoryTypeId"), 1L, 1);

                    b.Property<int>("AuxiliarAccessoryTypeId")
                        .HasColumnType("int");

                    b.Property<int>("AuxiliarAccessoryTypeTime")
                        .HasColumnType("int");

                    b.Property<DateTime>("DuoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("PatientAuxiliarAccessoryTypeId");

                    b.HasIndex("AuxiliarAccessoryTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAuxiliarAccessoryTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientBenefit", b =>
                {
                    b.Property<int>("PatientBenefitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientBenefitId"), 1L, 1);

                    b.Property<DateTime>("BenefitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PatientBenefitId");

                    b.HasIndex("BenefitId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientBenefits");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientExpenseType", b =>
                {
                    b.Property<int>("PatientExpenseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientExpenseTypeId"), 1L, 1);

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("PatientExpenseTypeId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientExpenseTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationCancerType", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("CancerTypeId")
                        .HasColumnType("int");

                    b.HasKey("PatientInformationId", "CancerTypeId");

                    b.HasIndex("CancerTypeId");

                    b.ToTable("PatientInformationCancerType");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationDoctor", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("PatientInformationId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("PatientInformationDoctor");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationMedicine", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.HasKey("PatientInformationId", "MedicineId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PatientInformationMedicine");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationServiceType", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.HasKey("PatientInformationId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("PatientInformationServiceType");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationTreatmentPlace", b =>
                {
                    b.Property<int>("PatientInformationId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentPlaceId")
                        .HasColumnType("int");

                    b.HasKey("PatientInformationId", "TreatmentPlaceId");

                    b.HasIndex("TreatmentPlaceId");

                    b.ToTable("PatientInformationTreatmentPlace");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ActivePatient", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithOne("ActivePatient")
                        .HasForeignKey("RVCC.Data.Models.Domain.ActivePatient", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Address", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("Addresses")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.FamilyMember", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.FileAttachment", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("FileAttachments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Naturality", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithOne("Naturality")
                        .HasForeignKey("RVCC.Data.Models.Domain.Naturality", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.PatientInformation", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithOne("PatientInformation")
                        .HasForeignKey("RVCC.Data.Models.Domain.PatientInformation", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Phone", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("Phones")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Stay", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("Stays")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientAuxiliarAccessoryType", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.AuxiliarAccessoryType", "AuxiliarAccessoryType")
                        .WithMany("PatientAuxiliarAccessoryTypes")
                        .HasForeignKey("AuxiliarAccessoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("PatientAuxiliarAccessoryTypes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuxiliarAccessoryType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientBenefit", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Benefit", "Benefit")
                        .WithMany("PatientBenefits")
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("PatientBenefits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benefit");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientExpenseType", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.ExpenseType", "ExpenseType")
                        .WithMany("PatientExpenseTypes")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.Patient", "Patient")
                        .WithMany("PatientExpenseTypes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseType");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationCancerType", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.CancerType", "CancerType")
                        .WithMany("PatientInformationCancerTypes")
                        .HasForeignKey("CancerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationCancerTypes")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancerType");

                    b.Navigation("PatientInformation");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationDoctor", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Doctor", "Doctor")
                        .WithMany("PatientInformationDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationDoctors")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("PatientInformation");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationMedicine", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.Medicine", "Medicine")
                        .WithMany("PatientInformationMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationMedicines")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("PatientInformation");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationServiceType", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationServiceTypes")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.ServiceType", "ServiceType")
                        .WithMany("PatientInformationServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInformation");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("RVCC.Data.Models.RelationModels.PatientInformationTreatmentPlace", b =>
                {
                    b.HasOne("RVCC.Data.Models.Domain.PatientInformation", "PatientInformation")
                        .WithMany("PatientInformationTreatmentPlaces")
                        .HasForeignKey("PatientInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RVCC.Data.Models.Domain.TreatmentPlace", "TreatmentPlace")
                        .WithMany("PatientInformationTreatmentPlaces")
                        .HasForeignKey("TreatmentPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInformation");

                    b.Navigation("TreatmentPlace");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.AuxiliarAccessoryType", b =>
                {
                    b.Navigation("PatientAuxiliarAccessoryTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Benefit", b =>
                {
                    b.Navigation("PatientBenefits");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.CancerType", b =>
                {
                    b.Navigation("PatientInformationCancerTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Doctor", b =>
                {
                    b.Navigation("PatientInformationDoctors");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ExpenseType", b =>
                {
                    b.Navigation("PatientExpenseTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Medicine", b =>
                {
                    b.Navigation("PatientInformationMedicines");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.Patient", b =>
                {
                    b.Navigation("ActivePatient");

                    b.Navigation("Addresses");

                    b.Navigation("FamilyMembers");

                    b.Navigation("FileAttachments");

                    b.Navigation("Naturality");

                    b.Navigation("PatientAuxiliarAccessoryTypes");

                    b.Navigation("PatientBenefits");

                    b.Navigation("PatientExpenseTypes");

                    b.Navigation("PatientInformation");

                    b.Navigation("Phones");

                    b.Navigation("Stays");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.PatientInformation", b =>
                {
                    b.Navigation("PatientInformationCancerTypes");

                    b.Navigation("PatientInformationDoctors");

                    b.Navigation("PatientInformationMedicines");

                    b.Navigation("PatientInformationServiceTypes");

                    b.Navigation("PatientInformationTreatmentPlaces");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.ServiceType", b =>
                {
                    b.Navigation("PatientInformationServiceTypes");
                });

            modelBuilder.Entity("RVCC.Data.Models.Domain.TreatmentPlace", b =>
                {
                    b.Navigation("PatientInformationTreatmentPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
